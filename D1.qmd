# Na začetku je bil tidyverse {#sec-delavnica1}

```{r}
#| include: false
# install.packages("knitr")
```


```{r}
#| echo: false
#| fig-keep: 'all'
#| out-width: "100%"
#| fig-link: "https://www.cedricscherer.com/top/dataviz/#tidytuesday"
knitr::include_graphics("pictures/2020_27_Xmen_annotated.png")
```


Med prvim srečanjem uporabljamo tole jezikovno gradivo s spletnega portala [clarin](www.clarin.si), @11356/1491 :\
Juvan, Marko; et al., 2022, Corpus of 1968 Slovenian literature Maj68 2.0, Slovenian language resource repository CLARIN.SI, ISSN 2820-4042, http://hdl.handle.net/11356/1491.

Tale korpus je tudi integriran v [NoSketchEngine](http://www.clarin.si/noske/). Nekaj osnovnih informacij o gradivu najdemo na povezavi:  
<https://www.clarin.si/noske/run.cgi/corp_info?corpname=maj68&struct_attr_stats=1>


## Paketki

Programski zapis (skript) vsebuje *navadno besedilo* in *programske odstavke* (program chunk), v katere vpisujemo ali prilepimo programske korake. Pri orientaciji v našem programskem zapisu nam pomaga razčlemba (*Outline*). 

*Programski odstavek* sprožimo s pritiskom na *zeleni trikotnik* na vrhu programskega odstavka ali z bližnjico `Ctrl + Shift + Enter`. *Posamezne programske korake* znotraj odstavka lahko označimo z miško ali tipkovnico in jih izvedemo z bližnjico `Ctrl + Enter`. 

*Bližnjice* so navedene v menuju *Code*. Tudi od tam so dosegljivi osnovni programski ukazi.   

V sledečem programskem odstavku (program chunk) nalagamo neprivzete knjižnice (`library`) v računalniški spomin (RAM). Če jih pozabimo naložiti v pomnilnik, zaželene dodatne programske funkcije ne bodo na razpolago.  

```{r}
#| warning: false
#| message: false

library(tidyverse)
library(tidytext)
library(lubridate)
library(readtext)
library(quanteda)
library(readxl)
library(writexl)
library(wordcloud2)
library(meme)
```

Če potrebujemo še kakšno dodatno knjižnico, jo namestimo tako kot v naslednjem programskem odstavku s funkcijo `install.packages()` ali v menuju v desnem panelu (Files, Packages, Help, ...):

```{r}
#| eval: false
#| include: true
install.packages("ggtext")
```

Vsako dodatno knjižnico naložimo v pomnilnik z ukazom `library()`:

```{r}
#| include: true
#| eval: false
library(ggtext)
```

## Odpiranje besedilnih datotek

Optimalno je, če so vse besedilne datoteke v isti mapi. Potem lahko naložimo vsa besedila z enim ukazom, tj. `readtext()`, v pomnilnik. 

Funkcija `readtext()` podpira tudi nekatere druge datotečne oblike (npr. *csv*, *pdf* in Wordove datoteke). 

```{r}
txt <- readtext("slovenski_korpusi/maj68/*.txt", 
                encoding = "UTF-8")
txt

```

Vsako besedilo ima svoj *doc_id* in je zajeto v podatkovnem nizu (tabeli), ki smo ga poimenovali *txt*.

Ogled tabele v vgrajenem brskalniku: 

```{r}
#| eval: false
view(txt)
```


Kdo je napisal ta besedila? Odgovor se skriva podatkovnem nizu, ki ga imamo v isti mapi in ga odpremo s funkcijo `read_tsv()`, saj so stolpci medsebojno ločeni s tabulatorjem (`\t`):

```{r}
public <- read_tsv("slovenski_korpusi/maj68/maj68-publics.tsv")
head(public) %>% rmarkdown::paged_table()
```

Za *odpiranje podatkovnih nizov ali tabel* imamo še celo kopico drugih ukazov ali možnost izbiranja prek menuja, ki omogoča tudi kopiranje programske funkcije:   

<https://cran.r-project.org/doc/manuals/R-data.html>

```{r}
#| eval: false
#| include: true
sami_izberemo_datoteko <- read.table(file.choose(), 
                                     sep = "\t", dec = ",",
                                     fileEncoding = "UTF-8")
```


Ukazi programske zbirke `tidyverse` imajo poenoteno *sintakso*: 
prvi argument je ime podatkovnega niza ali tabele (*data*), potem sledijo morebitni drugi argumenti (odvisno od posamezne funkcije): 
npr. `read_csv`("ime_datoteke_na_disku_ali_spletu.csv")  
`write_csv`(tabela_v_pomnilniku, "ime_datotke.csv")  
`select`(tabela_v_pomnilniku, ime_spremenljivke)
`filter`(tabela_v_pomnilniku, ime_spremenljivke == "Prešeren")  
`ggplot`(tabela_v_pomnilniku, aes(x, y))  ...

```{r}
#| eval: false
select(public, author_disp)
```


Simbol `%>%` (na slovenski tipkovnici bližnjica `ctrl + shift + M`) pomeni *nadaljuj z naslednjim ukazom in prevzemi vse količine iz prejšnjega koraka*. 

```{r}
#| eval: false
public %>% select(author_disp)
```

Simbol za dolar `$` se tudi uporablja za izbiranje spremenljivke: 

```{r}
#| eval: false
public$author_disp
```


V naši tabeli s slovenskimi leposlovnimi deli iz 1960ih let je stolpec z imenom *...27*. Stolpec je prazen, zato ga bomo odstranili.

```{r}
public <- public %>% 
  # odstrani 27. stolpec (minus pomeni odstrani)
  select(-27)
```


## Združitev tabel

Obe tabeli lahko združimo, saj imamo *doc_id* v tabeli *txt* (z besedili) in *id* v tabeli *public*. Za združevanje morata imeti oba stolpca isto ime. Zato ga bomo v tabeli *public* ustrezno prilagodili in v vrsticah tabele *txt*odstranili pripono *.txt* v imenih posameznih besedil.

```{r}
public <- public %>% 
  # preimenovanje stolpca
  rename(doc_id = id) 

txt <- txt %>% 
  # odstranjevanje pripone
  mutate(doc_id = str_remove(doc_id, "\\.txt"))

df <- public %>% 
  left_join(txt, by = "doc_id")

dim(df)
```

Podatkovni niz z imenom *df* ima 1521 vrstic (rows) in 27 stolpcev (cols). Po želji lahko nekoristne stolpce odstranimo ali izberemo zaželene stolpce.

## Shranjevanje tabele {#sec-d1}

Podatkovni niz lahko shranimo na disku. Možni so različne oblike. Najustreznejša oblika je golo besedilo z vejicami, podpičji ali tabulatorji (csv, csv2, txt). Podatkovni niz se shranjuje po mednarodni kodni strani *UTF-8*.

```{r}
# golo besedilo, stolpci ločeni s podpičji
write.csv2(df, "data/slovenska_literatura_1968.csv")
# write_csv2() je alternativna funkcija iz zbirke tidyverse 
```

Mnogi redno uporabljajo `Excel`, ki zahteva licenco. Potencialna slabost je, da `Excel` čez nekaj let mogoče ne bo več podpiral starega datotečnega formata. Druga morebitna slabost je, da `Excel` podpira le 32767 znakov v celici. Najbolj varno je trajno shranjevanje v obliki golega besedila, saj tako datoteko lahko odpremo z vsakim programom. 

```{r}
#| eval: false

# vsaj ena celica presega dovoljeno število znakov v Excelu !
# zato tale funkcija ne bo nadaljevala shranjevanje datoteke
write_xlsx(df, "data/slovenska_literatura_1968.xlsx")

# tale funkcija vas le posvari o skrčenih celicah !
write.xlsx2(df, "data/slovenska_literatura_1968.xlsx")
```


## Izbor literarnih del

Katere besedilne zvrsti najdemo v stolpcu *text_type*?

```{r}
df %>% 
  select(text_type) %>% 
  distinct() %>% 
  pull()
```

Izbrati želimo le prozna dela. 

```{r}
proza <- df %>% 
  filter(text_type == "proza")

dim(proza)
```

V tabeli z imenom *proza* je 342 vrstic (tj. proznih del) in po združitvi tabel 27 stolpcev.


## Dodajanje stolpcev

S funkcijo `mutate()` dodajamo nove stolpce ali spreminjamo vsebino stolpcev.

Kako dolga so besedila? Koliko znakov, pojavnic (tokens) in različnic (types) imajo besedila? Za prvo oceno uporabljajo funkcije knjižnice `quanteda`. 

```{r}
proza <- proza %>% 
  # dodajamo tri stolpce
  mutate(st_znakov = nchar(text),
         tokens = ntoken(text),
         types = ntype(text))

proza %>% 
  # izbor stolpcev za prikaz
  select(doc_id, title, st_znakov, tokens, types, author_disp) %>% 
  # razvrščanje dokumentov od najdaljšega do najkrajšega
  arrange(-st_znakov) %>% 
  # prikaži samo 10 prvih dokumentov
  head(10) %>% 
  # za preglednejši izpis tabele
  rmarkdown::paged_table()
```

Štetje znakov, pojavnic in različnic vključuje tudi ločila in drugo nebesedno gradivo. Tega večinoma ne želimo.

Poenotimo in dodajmo še stolpec z datumi za prikaz na časovnici.

```{r}
proza <- proza %>% 
  # poenoti časovne navedbe - regex!
  mutate(date = str_replace(date_from, 
                                 "(\\d{4})-(\\d{2})-(\\d{2})",
                                 "\\1-\\2")) %>% 
  # pretvori v datumski format in nastavi 1.dan v mesecu
  mutate(date = ym(date))

proza %>% 
  # izberi stolpce za prikaz
  select(doc_id, date_from, date) %>% 
  # izberi naključen vzorec iz zapisov
  slice_sample(n = 5) %>% 
  rmarkdown::paged_table()
```

Časovna razporeditev objavljenih proznih del v obliki grafikona:

```{r}
library(lubridate)

proza %>% 
  # preštej koliko naslovov glede na datum
  count(date, name = "titles") %>% 
  # nariši diagram
  ggplot(aes(date, titles)) +
  # črtni diagram
  geom_segment(aes(x = date, xend = date, 
                   y = 0, yend = titles), 
               alpha = 0.5, color = "darkgreen") +
  # imena osi
  labs(x = "", y = "")

```

Kateri avtorji so zajeti v tem podatkovnem nizu proznih del?

```{r}
proza %>% 
  count(author_disp, sort = TRUE) %>% 
  rmarkdown::paged_table()
```

Kateri avtorji so sodelovali z Brankom Gradišnikom?

```{r}
proza %>% 
  filter(str_detect(author_disp, "Gradišnik")) %>% 
  select(doc_id, author_disp, title_disp) %>% 
   rmarkdown::paged_table()
```


## Iskanje besednih oblik

Funkcija `str_detect()` nam poišče znake ali besede v jezikovnem gradivu, funkicja `filter()` pa omejuje število vrstic v tabeli. *Regularni izrazi* (*regex*) nam pomagajo pri oženju poizvedbenih meril. V naslednjem programskem odstavku je prikazana uporaba regex. Število zadetkov se nanaša na število najdenih dokumentov.

```{r}
proza %>% 
  # poišči vzorec in omejuj izbor vrstic
  filter(str_detect(text, "dober.+dan")) %>% 
  # izberi stolpce za prikaz
  select(doc_id, author_disp, text) %>% 
  # preštej: 16 zadetkov
  count()

# samo besedi dober in dan, vmes pa je lahko en ali več znakov
proza %>% 
  filter(str_detect(text, "\\bdober\\b.+\\bdan\\b")) %>% 
  select(doc_id, author_disp, text) %>% 
  # 13 zadetkov
  count()
```

## Besede

Seznam besed (ali drugih manjših besedilnih enot) lahko ustvarimo na več načinov. V sledečem programskem odstavku uporabljamo funkcijo `unnest_tokens()` iz knjižnice `tidytext`.  

V funkciji `unnest_tokens()` najprej navedemo izhodno obliko (npr. besedo), vhodno gradivo (npr. besedilo) na tretjem mestu vrsto besedilne enote (npr. "words"). 

Besedilo lahko razdelimo na naslednje manjše enote:   
"words" (default), "characters", "character_shingles", "ngrams", "skip_ngrams", "sentences", "lines", "paragraphs", "regex", "tweets" (tokenization by word that preserves usernames, hashtags, and URLS ).  

```{r}
besede <- proza %>% 
  unnest_tokens(word, text, "words")

dim(besede)
```

Podatkovni niz z imenom *besede* je dolg 704956 vrstic (tj. število pojavnic) in 30 stolpcev. V vsaki vrstici je ena besedna oblika. 

### Štetje besed

Koliko pojavnic je v vseh zbranih proznih delih? Za izračun vsote, povprečja in drugih količin uporabljamo funkcijo `summarise()`.

```{r}
besede %>% 
  summarise(freq = n())
```

V tabeli *besede* je skoraj 705000 pojavnic. Toliko je tudi vrstic v tabeli, kar lahko ugotovimo tudi s funkcijo `nrow()`.

```{r}
nrow(besede)
```

Koliko je povedi?

```{r}
stavki <- proza %>% 
  unnest_tokens(poved, text, "sentences")

dim(stavki)
```

V proznih delih je 51613 povedi.  

Katere besedne oblike (*types*) se v proznih delih najpogosteje pojavljajo? Za šteje uporabljamo funkcijo `count()`.

```{r}
besede %>% 
  count(word, sort = TRUE) %>% 
  head(10) %>% 
  rmarkdown::paged_table()
```

Ni tako presenetljivo, da so funkcijske besede najpogostejše.

### Izločevanje besed

V vsebinskih analizah želimo na vrhu besednega seznama videti predvsem besede, ki bistveno prispevajo k vsebini besedil. Funkcijskih besed se lahko znebimo na več načinov. Najosnovnejši (*surov*) način je uporaba seznama nezaželenih besednih oblik (*stopwords*).

```{r}
stop_tidy <- stopwords(language = "sl", source = "stopwords-iso") %>% 
  # iz seznama naredi tabelo
  as_tibble() %>% 
  # preimenuj stolpec "value"
  rename(word = value)

dim(stop_tidy)
```

Gornji seznam vsebuje 446 besednih oblik. Po želji lahko seznam podaljšamo ali skrajšamo.

```{r}
stop_tidy <- c(stopwords(language = "sl", source = "stopwords-iso"), 
               "še", "tem", "sploh", "mogoče", "tej", 
               "niti", "zato", "ampak") %>% 
  as_tibble() %>% rename(word = value)

dim(stop_tidy)
```

Potem nadaljujemo s "*čistilno* akcijo", in sicer s funkcijo `anti_join()`. Oba podatkovna niza (v našem primeru *besede_clean* in *stop_tidy*) morata vsebovati stolpec z imenom *word* (tj. privzeto ime stolpca, ki ga funkcija `anti_join()` pričakuje).

```{r}
besede_clean <- besede %>% 
  anti_join(stop_tidy, by = "word")

dim(besede_clean)
```

Po izločitvi nezaželenih besed se je število pojavnic bistveno zmanjšalo, tj. približno na polovico.

Ponovimo štetje besednih oblik. Oglejmo si 10 najpogostejših - s funkcijo `head()`.

```{r}
b_stetje <- besede_clean %>% 
  count(word, sort = TRUE)

b_stetje %>% 
  head(10) %>% 
  rmarkdown::paged_table()
```

Druga preprosta možnost filtriranja je izbrati le besede, dolge tri znake ali več.

```{r}
b_stetje <- besede_clean %>% 
  # štejemo število znakov v stolpcu word
  # dodamo pogoj, da mora biti večje od 2
  filter(nchar(word) > 2) %>% 
  # štejemo
  count(word, sort = TRUE)

b_stetje %>% 
  head(10) %>% rmarkdown::paged_table()
```

Preštejmo še besedne oblike v odvistnosti od avtorja! Podatkovni niz moramo grupirati po avtorjih, tj. s funkcijo `group_by()`.

```{r}
b_avtorji <- besede_clean %>% 
  # šteli bomo oblike z ozirom na avtorje
  group_by(author_disp) %>% 
  # štejemo število znakov v stolpcu word
  # dodamo pogoj, da mora biti večje od 2
  filter(nchar(word) > 2) %>% 
  # štejemo
  count(word, sort = TRUE)

b_avtorji %>% 
  head(10) %>% rmarkdown::paged_table()
```

Pa dodajmo še slikico z izborom avtorjev. Najprej izberemo avtorje, npr. takole: 

```{r}
avtorji_select <- b_avtorji %>% 
  # brez neznanih avtorjev
  filter(author_disp != "[Neznani avtor]") %>% 
  # imena ne smejo biti podvojena
  distinct(author_disp) %>% 
  # omejuj število avtorjev za prikaz
  head(9) %>% 
  # potegni seznam imen iz stolpca
  pull(author_disp)

```

*Stolpčni diagram* najpogostejših besednih oblik pri devetih avtorjih (po odstranitvi najkrajših besed): 

```{r}
b_avtorji %>% 
  # filtriraj glede na zgoraj ustvarjeni seznam avtorjev
  filter(author_disp %in% avtorji_select) %>% 
  # izberi le po 10 najpogostejših besednih oblik
  slice_head(n = 10) %>% 
  # razvrščanje besednih oblik glede na pogostnost
  # to je lahko potrebno ob uporabi panelov (facet)
  mutate(word = reorder_within(word, by = n, 
                               within = paste0("(",n,")"), 
                               sep = " ")) %>% 
  ggplot(aes(n, word, fill = author_disp)) +
  geom_col() +
  facet_wrap(~ author_disp, scales = "free") +
  labs(y="", x = "Število pojavnic najpogostejših besednih oblik pri devetih slovenskih avtorjih") +
  theme(legend.position = "none")
```

Če gornji ukrepi za omejevanje besednega gradiva niso bili dovolj učinkoviti, so možni bolj prefinjeni postopki. Med priljubljenimi so *lematizacija*, označevanje besednih oblik (*POS tagging*), term frequency inverse document frequency (*tf_idf*), določevanje ključnih besed (*keywords*) ali drugi postopki.

### Besedni oblak

Priljubljen in preprost način upodobitve pogostosti besed je besedni oblak. Lepe barvite oblake riše funkcija `wordcloud2()`, ki privzeto pričakuje tabelo z dvema stolpcema: besedo in pogostnost besede.

```{r}
wordcloud2(b_stetje)
```


Gornji besedni oblak vsebuje besedne oblike (types). Informativnejši bi bil, če bi besedne oblike lematizirali in prikazovali slovarske enote.


```{r}
library(meme)

if (.Platform$OS.type == "windows") {
    windowsFonts(
        Script = windowsFont("Segoe Script"),
        ScriptBold = windowsFont("Script MT Bold"),
        Impact = windowsFont("Impact"),
        Courier = windowsFont("Courier")
    )
}

## import pokemon fonts
## downloaded from <https://fontmeme.com/fonts/pokmon-font/>
font_pokemon()


# u2 <- system.file("success.jpg", package="meme")
u2 <- "pictures/boy_with_fist.png"
x <- meme(u2, "Mami, Ati!", "Dajva midva poskusiti!", 
          size = 3, color = "#FFD700", font='Pokemon_Hollow')
meme_save(x, file="pictures/success1.png")
x
```


## Naloge

Naloge so rešljive na osnovi programskh funkcij, prikazanih v prejšnjih odstavkih. 

### N1

::: rmdrobot

- V RStudiu ustvarite nov dokument s pripono .qmd (Quarto document)!

-  V RStudiu odprite dve besedili približno enake dolžine (npr. dva romana po lastni izbiri ali iz gornjega jezikovnega gradiva slovenske literature iz leta 1968)!  

- Preštejte, koliko pojavnic (tokens) je v obeh besedilih skupaj!  

- Koliko pojavnic (tokens) je vsakem besedilu!

- Narišite stolpčni diagram, ki prikazuje dolžino posameznih besedil (tj. število pojavnic na besedilo) !

:::


### N2

::: rmdrobot

- V RStudiu ustvarite nov dokument s pripono .qmd (Quarto document)!

- V RStudiu odprite še dve besedili približno enake dolžine! 

- Združite prejšnji dve besedili s prejšnjima dvema v skupno tabelo!

- Zaradi vsebinske analize odstranite funkcijske besede (stopwords)!

- Preštejte preostale pojavnice vsakega izmed štirih besedil!

- Tabeli z besedili dodajte stolpec z deleži posameznih pojavnic!

- Shranite dopolnjeno tabelo z besedili na vašem disku!

- Narišite besedni oblak za eno izmed besedil!

:::


```{r}
dir <- system.file('fonts/bubble', package='meme')
font_import(dir)

x <- meme(u2, "Mami, Ati!", "Sploh ni bilo hudo.", 
          size = 3, color = "#D874E1", font='bubble1')
meme_save(x, file="pictures/success2.png")
x
```

