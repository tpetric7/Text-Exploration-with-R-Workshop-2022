# Dodatek: Pretvorba XML datotek

## Paketki

```{r}
#| warning: false
#| message: false

library(tidyverse)
library(xml2)
library(XML)
library(xmlconvert)
library(rvest)
```


## Pretvorba XML datotek

Datoteke v obliki xml lahko pretvorimo v podatkovni niz. 

S spletnega portala [clarin.si](https://www.clarin.si/repository/xmlui/handle/11356/1491) smo naložili v shranili literarni korpus v obliki xml, ki poleg besedil vsebuje tudi različne metapodatke.  

### Seznam xml datotek

Najprej ustvarimo seznam relevantnih xml datotek. Datoteke imajo pripono *vert*.

```{r warning=FALSE, message=FALSE}
seznam <- list.files("slovenski_korpusi/maj68.vert/",
                     pattern = "*.vert",
                     full.names = TRUE)
wd <- getwd()
pot <- paste0(wd, "/", seznam)

head(pot, 3)
```

### Pretvorba z xmlconvert

#### Metapodatki

Vsaka xml datoteka v tej zbirki vsebuje nekaj *metapodatkov*. Najprej vse potrebne postopke preizkusimo na primeru ene izmed razpoložljivih xml datotek z zgoraj ustvarjenega seznama, ki smo mu dodelili ime *pot*.  

```{r}
library(xmlconvert)
xdf <- xml_to_df(pot[1], records.tag = "text", 
                 fields = "attributes") %>% 
  # preimenovanje stolpca
  rename(text_id = id) %>% 
  # oblikovanje izbranih stolpcev
  mutate(across(c(text_id:author, gender, 
                  monograph:facs), as.character)) %>% 
  mutate(across(c(birth, year), as.numeric))

head(xdf)
```

#### Slovnična analiza

Besedilo v vzorčni xml datoteki je razdeljeno na 70 povedi (sentence, s). Toliko je stolpcev v tabeli. 

```{r}
library(xmlconvert)
ydf <- xml_to_df(pot[1], records.tag = "text", fields = "tags",
                 field.names = "id")
head(ydf)
```

Povedi sestojijo iz 277 stavkov. Toliko je stolpcev v tabeli. 

```{r}
library(xmlconvert)
sdf <- xml_to_df(pot[1], records.tag = "p", fields = "tags",
                 field.names = "id", 
                 hierarchy.field.delim = c("<s","<g"), 
                 stringsAsFactors = F)
sdf <- sdf[1,]
head(sdf)
```

#### Pretvorba slovnične analize

Imena stolpcev, ki vsebuje slovnično analizo besednih oblik. 

```{r}
###Positional attributes
columns <- c("word", "lemma", "tag_en", "upos", "feats", "token_id", "dep", "dep_head_lemma", "dep_head_tag_en", "dep_head_upos", "dep_head_feats", "dep_head_id")
```

Pretvorba hierarhične xml strukture v dvodimenzionalno tabelo. 

```{r}
zdf <- xml_to_df(pot[1], records.tag = "text", fields = "tags",
                 field.names = "id") %>% 
  # pretvori stolpce v vrstice
  pivot_longer(cols = starts_with("maj68"), 
               names_to = "sentence_id", values_to = "value") %>% 
  # razdeli stolpec na več stolpcev
  separate(value, into = c("delimiter", "value"), 
           sep = "\n", extra = "merge", fill = "right") %>% 
  # ustvari vrstice iz stolpcev
  separate_rows(value, sep = "\n") %>% 
  # razdeli stolpec na več stolpcev
  separate(value, into = columns, 
           sep = "\t", extra = "merge", fill = "right") %>% 
  # pripravljamo text_id za kasnejše združevanje tabel: 
  # positive lookahead: match q followed by u
  mutate(text_id = str_extract(sentence_id, ".+(?=\\.)"),
         text_id = str_remove(text_id, "\\.$"),
         text_id = str_replace(text_id, "\\.", "-")) %>% 
  # postavi stolpec text_id na prvo mesto
  select(text_id, sentence_id:dep_head_id)

```

#### Združevanje tabel

Združevanje tabele, ki vsebuje metapodatke, s tabelo, ki vsebuje slovnično analizo besednih oblik. 

```{r}
literatura68 <- xdf %>% 
  left_join(zdf, by = "text_id")
head(literatura68)
dim(literatura68)
```

#### Preverba

Preden zaženemo zanko za pretvorbo xml datotek, je dobro preveriti, ali so vse xml datoteke brez napake. Da bi preprečili *error “xmlParseEntityRef: noname”*, preverjamo, ali je v gradivu izgubljen znak & (ampersand) in ga zamenjamo z &amp; - s pravilnim kodiranjem. 

https://stackoverflow.com/questions/29831427/convert-to-amp-while-preserving-existing-entity-references

Naslednja programska zanka zamenja osamele znake \\& (ampersand) in jih zamenja z ustreznim \\&amp;  

Na mojem prenosniku je pregled in zamenjava trajala 568 sekund.  

```{r}
#| eval: false

tictoc::tic()
for(i in 1:length(pot)){
  read_lines(pot[i]) %>% 
  # negative lookahead to locate single & and replace them
  str_replace_all(pattern = '&(?![_a-zA-Z]\\w*;)(?!#\\d+;)', 
       replacement = '&amp;') %>% 
    write_lines(pot[i])
}
tictoc::toc()
```

#### Recept

Pretvoriti želimo vse xml dokumente (delitev na povedi) in zato bomo sestavili programsko zanko -- *for-loop*. 

Uporaba regularnih izrazov (regex) je ponekod nepogrešljiva, npr. tudi v spodnjem programskem odstavku, kjer smo potrebovali *lookahead*.

regex: https://www.regular-expressions.info/lookaround.html  

```{r}
#| eval: false
#| warning: false
#| message: false

library(xmlconvert)

# Positional attributes
columns <- c("word", "lemma", "tag_en", "upos", "feats", "token_id", "dep", "dep_head_lemma", "dep_head_tag_en", "dep_head_upos", "dep_head_feats", "dep_head_id")

tictoc::tic()

litxml <- NULL

for(i in 1:length(pot)){
  
  Sys.time()
  
  print(paste("Pridobivam metapodatke xml datoteke: \n", pot[i]))
  
  xdf <- xml_to_df(pot[i], records.tag = "text", 
                   fields = "attributes") %>% 
    rename(text_id = id) %>% 
    mutate(across(c(text_id:author, gender, 
                    monograph:facs), as.character)) %>% 
    mutate(across(c(birth, year), as.numeric))
  
  print(paste("Preoblikujem slovnično analizo iz xml datoteke: \n", pot[i]))
  
  zdf <- xml_to_df(pot[i], records.tag = "text", fields = "tags",
                   field.names = "id") %>% 
    pivot_longer(cols = starts_with("maj68"), 
                 names_to = "sentence_id", values_to = "value") %>% 
    separate(value, into = c("delimiter", "value"), 
             sep = "\n", extra = "merge", fill = "right") %>% 
    separate_rows(value, sep = "\n") %>% 
    separate(value, into = columns, 
             sep = "\t", extra = "merge", fill = "right") %>% 
    # positive lookahead: match q followed by u
    mutate(text_id = str_extract(sentence_id, ".+(?=\\.)"),
           text_id = str_remove(text_id, "\\.$"),
           text_id = str_replace(text_id, "\\.", "-")) %>% 
    select(text_id, sentence_id:dep_head_id)
  
  print("Združujem obe tabeli: \n")
  
  slovnica = xdf %>% 
    left_join(zdf, by = "text_id")
  
  print("Tabelo dodajam prejšnjim zapisom: \n")
  
  litxml = bind_rows(litxml, slovnica)
}

tictoc::toc()

dim(litxml)
```

Pretvorba xml zapisa v tabelo je trajal 9798 sekund. Tabela ima več kot milijon 600 tisoč zapisov in 31 stolpcev. 


## Shrani

Shranimo podatkovni niz v splošni dostopni tabelarni obliki, tako da ga lahko (ponovno) odpremo z `Excelom` ali v `RStudiu` za poizvedbe.  

```{r}
#| eval: false

write.csv2(litxml, "data/clarin_slovenska_literatura_maj1968.csv")
```

Podatkovni niz zasede na disku približno 653 MB.  


## Druge knjižnice

Z drugimi knjižnicami (`XML`, `xml2`, `rvest`) je postopek nekoliko bolj zamotan -- vsaj v tem primeru je tako. 

https://megapteraphile.wordpress.com/2020/03/29/converting-xml-to-tibble-in-r/


## Nekaj preprostih poizvedb

(Ponovno) odpremo tabelo.

```{r}
litxml <- read_csv2("data/clarin_slovenska_literatura_maj1968.csv")
```

Tabela vsebuje 195 avtorjev in avtorskih dvojic, njihova dela,  slovnično analizo besednih oblik in nekaj metapodatkov o avtorjih in delih. 

```{r}
litxml %>% 
  count(author, sort = TRUE) %>% 
  rmarkdown::paged_table()
```

Kdo je sodeloval z Brankom Gradišnikom?

```{r}
litxml %>% 
  filter(str_detect(author, "Gradišnik")) %>% 
  select(author, title) %>% 
  distinct()
  
```


```{r}
litxml %>% 
  group_by(author) %>% 
  filter(str_detect(word, "^[:alpha:]+")) %>% 
  count(word, sort = T) %>% 
  head(10) %>% 
  rmarkdown::paged_table()
```


## Pretvorba podatkovnega niza v xml

```{r}
# odstrani številke vrstic
litxml <- litxml[-1]
```

```{r}
library(xmlconvert)
# Convert to XML with the fields (i.e. dataframe variables/columns) stored in XML tags
xmls <- df_to_xml(litxml[litxml$text_id == "maj68-0001",], fields = "tags", record.tag = "text_id")
```

```{r}
write_lines(xmls, "data/xmls.xml")
```


```{r}
# Convert to XML with the fields (i.e. dataframe variables/columns) stored in attributes
xmls2 <- df_to_xml(litxml[litxml$text_id == "maj68-0001",], fields="attributes", record.tag = "text_id")

```

```{r}
write_lines(xmls2, "data/xmls2.xml")
```


